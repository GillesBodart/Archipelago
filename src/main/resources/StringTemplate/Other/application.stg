application(package, name, nameWatch, variables,alarms, dzs, uts, functions,startState,states) ::= <<
package <package>;

import be.unamur.info.megao.watch.oapiday.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class <name>Application extends AbstractApplication\<<nameWatch>\>{

    // Logger
    private static final Logger LOG = LoggerFactory.getLogger(<name>Application.class);

    // Variables declarations
    <variables:varDecl()>
    // Function declarations
    <functions:funDecl()>
    // Alarm declarations
    <alarms:alarmDecl()>


    public <name>Application(<nameWatch> watch){
        super(watch, "<name>");

        // Functions
        <functions:newFunction()>
        //Alarm
        <alarms:newAlarm()>
    }

    @Override
    public void start() {
            <startState:stateBody()>
        }

    @Override
        public void startWithAlarm(Alarm alarm) {
            LOG.debug("Starting application {} with alarm {}", getName(), alarm.getName());
            <if (!alarms)>
                throw new UnsupportedOperationException("Not alarm declared!");
            <else>
					
            <endif>
        }


    //Methode State
    <states:newStateMethod()>


}
>>

logDecl (name) ::= "private static final Logger LOG = LoggerFactory.getLogger(TimeApplication.class);<\n>"

varDecl(var) ::= "private Time <var.name>;<\n>"

alarmDecl(name) ::= "private final Alarm <name>;<\n>"
newAlarm(name) ::= "<name> = new Alarm(\"<name>\",this);<\n>"

funDecl(fun) ::= "private final DisplayFunction <fun.name>DisplayFunction;<\n>"


newStateMethod(state) ::= <<
private final State\<<name>Application> <state.name>State = new AbstractState\<<name>Application>("<state.name>State", this){
</n>
		 @Override
         public void entry() {
             LOG.debug("Entering state {}", getName());
             setCurrentDisplayFunction(<state.displayFunction.name>DisplayFunction);
			 <if( state.blinkingZone)>
			 watch.<state.blinkingZone>Displayzone.startBlinking();
			 <endif>
         }

         @Override
		 public void handleButtonPressed(Button button){
		    LOG.debug("Handling button pressed {}", button.getName());

			<if (first(state.events))>
                <if (first(state.events).star)>
                    <actionFirst()>
                <else>
                    if(button.equals(watch.<first(state.events).buttonTriggered>Button)){

                        <state:actionFirst()>
                    }<rest(state.events):elsifEvent()>
                <endif>
			<endif>
		 }

         @Override
		 public void exit(){
		    LOG.debug("Exiting state {}", getName());
			<if( state.blinkingZone)>
			watch.<state.blinkingZone>Displayzone.stopBlinking();
			<endif>
		 }


};
</n>
>>


newFunction(fun) ::= <<
<fun.name>DisplayFunction = new DisplayFunction ("<fun.name>DisplayFunction",new Displayzone[]{<dzs:nameDZDecl();separator=", ">},new Time.Field[]{<uts:nameUTDecl();separator=", ">});</n>

>>

nameDZDecl(name) ::= "watch.<name>Displayzone"
nameUTDecl(name) ::= "Time.Field.<name>"

stateBody(state) ::= 
<<
        LOG.debug("Starting application {}", getName());
        // Variables initializations
        <variables:initVar()>
        // Function initializations
        <functions:initFun()>
        setState(<state.name>State);
>>

initVar(var) ::= "<var.name> = new Time();<\n>"
initFun(fun) ::= "<fun.name>DisplayFunction.setValueSupplier(() -> <fun:assign()>);<\n>"

assign(fun) ::= 
<%
        <if(!fun.varAssigned)>
            <fun.expAssigned:express()>
        <else>
            <if (fun.varAssigned.global)>
                watch.
            <endif>
            <fun.varAssigned.name>
            <if (exp.varAssigned.systime)>
              ()
            <endif>
        <endif>
%>

express(exp) ::= 
<%
    <if (exp.firstVar.zero)>
        new Time()
    <else>
        <if (exp.firstVar.global)>
            watch.
        <endif>
        <exp.firstVar.name>
        <if (exp.firstVar.systime)>
            ()
        <endif>
        <exp.operations,exp.elements:{op,el|
            <if (op.plus)>
                .add(
                    <if (el && el.global)>
                        watch.<el.name>
                        <if(el.systime)>
                           ()
                        <endif>
                    <else>
                        <el.name>
                        <if(el.systime)>
                           ()
                        <endif>
                     <endif>
                    )
            <else>
                .minus(
                    <if(el.global)>
                        watch.<el.name>
                        <if(el.systime)>
                           ()
                        <endif>
                    <else>
                        <el.name>
                        <if(el.systime)>
                           ()
                        <endif>
                    <endif>
                    )
            <endif>
        }>
	<endif>
%>


elsifEvent(event) ::= <<
                    else if(button.equals(watch.<event.buttonTriggered>Button)){
                    <if (event.actions)>
                        <event.actions:transitAction()>
                    <endif>
                    <if (event.nextState)>
                        setState(<event.nextState>State);
                    <else>
                        stop();
                    <endif>
	}
>>

actionFirst(state) ::= <%

            <if (!first(state.events).actions)>
                <if(!first(state.events).nextState)>
                    stop();
                 <else>
                    setState(<first(state.events).nextState>State);
                <endif>
            <else>
                <first(state.events):transitEvent()>
                <if(!first(state.events).nextState)>
                    stop();
                <else>
                    setState(<first(state.events).nextState>State);
                <endif>
            <endif>
%>

transitEvent(event) ::= "<event.actions:transitAction()>"


transitAction(action) ::= <%

        <if (action.incRoll)>

            <if (action.rollUp)>

                rollUp(<action.operand.name>, watch.<action.operand.dz>Displayzone);<\n>
            <else>

                rollDown(<action.operand.name>, watch.<action.operand.dz>Displayzone);<\n>
            <endif>

        <else>
            <if (action.iconName)>
                <if (action.iconState)>
                    watch.<action.iconName>Icon.setOn();<\n>
                <else>
                    watch.<action.iconName>Icon.setOff();<\n>
                <endif>
            <else>
                <if (action.alarmName)>
                    <if (action.alarmValue)>
                        watch.alarmOff(<action.alarmName>);<\n>
                    <else>
                        watch.alarmSet(<action.alarmName>, <action.expOperation.firstVar.name>);<\n>
                    <endif>

                <else>
                    <if (action.operand.global)>
                        watch.
                    <endif>
                    <action.operand.name>
                    <if (action.operand.systime)>
                            ()
                    <endif>.setValue(<action.expOperation:express()>);<\n>

                <endif>
            <endif>

        <endif>
%>
